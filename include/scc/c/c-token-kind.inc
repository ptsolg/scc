C_TOKEN(UNKNOWN),
C_TOKEN(EOF),
C_TOKEN(EOL),
// end of macro, used by c_macro_lexer to mark the end of macro expansion
C_TOKEN(EOM),
// end of directive
C_TOKEN(EOD),
C_TOKEN(WSPACE),
C_TOKEN(COMMENT),

C_KEYWORD(CHAR),
C_KEYWORD(SHORT),
C_KEYWORD(INT),
C_KEYWORD(LONG),
C_KEYWORD(FLOAT),
C_KEYWORD(DOUBLE),
C_KEYWORD(SIGNED),
C_KEYWORD(UNSIGNED),
C_KEYWORD(VOID),

C_KEYWORD(STRUCT),
C_KEYWORD(UNION),
C_KEYWORD(ENUM),

C_KEYWORD(IF),
C_KEYWORD(ELSE),
C_KEYWORD(WHILE),
C_KEYWORD(FOR),
C_KEYWORD(DO),
C_KEYWORD(BREAK),
C_KEYWORD(CONTINUE),
C_KEYWORD(RETURN),
C_KEYWORD(GOTO),
C_KEYWORD(SWITCH),
C_KEYWORD(DEFAULT),
C_KEYWORD(CASE),

C_KEYWORD(AUTO),
C_KEYWORD(REGISTER),
C_KEYWORD(STATIC),
C_KEYWORD(EXTERN),
C_KEYWORD(INLINE),
C_KEYWORD(CONST),
C_KEYWORD(VOLATILE),
C_KEYWORD(RESTRICT),

C_KEYWORD(SIZEOF),
C_KEYWORD(TYPEDEF),
C_KEYWORD(ID),

C_PUNCTUATOR(LBRACE),     // {
C_PUNCTUATOR(RBRACE),     // }
C_PUNCTUATOR(LSBRACKET),  // [
C_PUNCTUATOR(RSBRACKET),  // ]
C_PUNCTUATOR(LBRACKET),   // (
C_PUNCTUATOR(RBRACKET),   // )
C_PUNCTUATOR(DOT),        // .
C_PUNCTUATOR(ARROW),      // ->
C_PUNCTUATOR(LE),         // <
C_PUNCTUATOR(GR),         // >
C_PUNCTUATOR(GREQ),       // >=
C_PUNCTUATOR(LEQ),        // <=
C_PUNCTUATOR(EQ2),        // ==
C_PUNCTUATOR(EXCLAIM_EQ), // !=
C_PUNCTUATOR(AMP2),       // &&
C_PUNCTUATOR(VBAR2),      // ||
C_PUNCTUATOR(EXCLAIM),    // !
C_PUNCTUATOR(TILDE),      // ~
C_PUNCTUATOR(CARET),      // ^
C_PUNCTUATOR(AMP),        // &
C_PUNCTUATOR(VBAR),       // |
C_PUNCTUATOR(PLUS),       // +
C_PUNCTUATOR(MINUS),      // -
C_PUNCTUATOR(STAR),       // *
C_PUNCTUATOR(SLASH),      // /
C_PUNCTUATOR(PERCENT),    // %
C_PUNCTUATOR(MINUS2),     // --
C_PUNCTUATOR(PLUS2),      // ++
C_PUNCTUATOR(LE2),        // <<
C_PUNCTUATOR(GR2),        // >>
C_PUNCTUATOR(EQ),         // =
C_PUNCTUATOR(CARET_EQ),   // ^=
C_PUNCTUATOR(AMP_EQ),     // &=
C_PUNCTUATOR(VBAR_EQ),    // |=
C_PUNCTUATOR(PLUS_EQ),    // +=
C_PUNCTUATOR(MINUS_EQ),   // -=
C_PUNCTUATOR(STAR_EQ),    // *=
C_PUNCTUATOR(SLASH_EQ),   // /=
C_PUNCTUATOR(PERCENT_EQ), // %=
C_PUNCTUATOR(LE2_EQ),     // <<=
C_PUNCTUATOR(GR2_EQ),     // >>=
C_PUNCTUATOR(COLON),      // :
C_PUNCTUATOR(COMMA),      // ,
C_PUNCTUATOR(QUESTION),   // ?
C_PUNCTUATOR(SEMICOLON),  // ;
C_PUNCTUATOR(ELLIPSIS),   // ...
C_PUNCTUATOR(HASH),       // #
C_PUNCTUATOR(HASH2),      // ##

C_TOKEN(CONST_INT),     
C_TOKEN(CONST_FLOAT),
C_TOKEN(CONST_DOUBLE), 
C_TOKEN(CONST_CHAR),   // 'a'
C_TOKEN(CONST_STRING), // "string"
C_TOKEN(ANGLE_STRING), // <string>

// preprocessor
C_PP_KEYWORD(NUM),
C_PP_KEYWORD(IF),
C_PP_KEYWORD(IFDEF),
C_PP_KEYWORD(IFNDEF),
C_PP_KEYWORD(ELIF),
C_PP_KEYWORD(ELSE),
C_PP_KEYWORD(ENDIF),

C_PP_KEYWORD(INCLUDE),
C_PP_KEYWORD(DEFINE),
C_PP_KEYWORD(UNDEF),
C_PP_KEYWORD(LINE),
C_PP_KEYWORD(ERROR),
C_PP_KEYWORD(PRAGMA),

// transactional memory
C_TOKEN(ATOMIC),
C_TOKEN(TRANSACTION_SAFE),

C_TOKEN(TOTAL_SIZE),